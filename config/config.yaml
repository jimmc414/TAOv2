# Base configuration
base_config:
  name: "Task Automation Orchestrator"
  version: "1.0"
  description: "A generic task automation system for orchestrating complex workflows"

  run_timeout: 3600  # 1 hour in seconds
  poll_interval: 5  # 5 seconds

  error_handling:
    max_retries: 3
    retry_delay: 60  # seconds

  reporting:
    summary_file: "./logs/automation_summary.txt"
    notification_email: "admin@example.com"

# UI Configuration
ui_config:
  type: "cli"  # or "gui"
  cli:
    prompt_prefix: "TAO> "
    color_scheme:
      info: "blue"
      warning: "yellow"
      error: "red"
  gui:
    theme: "light"
    layout: "sidebar"

# Workflow engine configuration
workflow_engine:
  plugin_directory: "./plugins"
  default_plugin: "statute_of_limitations_import"
  state_persistence:
    enabled: true
    storage: "./data/workflow_state.json"

# Shared utilities
shared_utilities:
  file_operations:
    module: "tao.utils.file_ops"
  data_validation:
    module: "tao.utils.validators"
  api_client:
    module: "tao.utils.api_client"

# Task interface definition
task_interface:
  required_methods:
    - "execute"
    - "validate_inputs"
    - "handle_error"
  optional_methods:
    - "cleanup"
    - "get_progress"

# Base task template
base_task:
  retry_attempts: 3
  retry_delay: 30  # seconds
  logging:
    level: INFO
    file: "./logs/task_logs.txt"
  error_handling:
    on_error: log_and_continue
    critical_errors:
      - DatabaseConnectionError
      - FileNotFoundError
  timeout: 600  # 10 minutes
  progress_reporting:
    enabled: true
    interval: 5  # seconds

# Task type templates
task_templates:
  data_processing:
    inherits: base_task
    module: "tao.templates.data_processing"
    required_parameters:
      - "input_data"
      - "output_format"
  file_operation:
    inherits: base_task
    module: "tao.templates.file_operation"
    required_parameters:
      - "source"
      - "destination"

# Global parameters
global_parameters:
  processing_date: "{{ today() }}"
  environment: "production"

# Plugin configurations
plugins:
  - name: "statute_of_limitations_import"
    description: "Plugin for importing and processing Statute of Limitations data"
    config_files:
      - "./plugins/sol_import/general_settings.yaml"
      - "./plugins/sol_import/task_configs.yaml"
      - "./plugins/sol_import/error_handling.yaml"
      - "./plugins/sol_import/logging_settings.yaml"
    tasks:
      determine_processing_scope:
        inherits: base_task
        module: "sol_import.scope"
        function: "determine_processing_scope"
        parameters:
          db_path: "./data/processing_history.db"
        conditional_logic:
          - condition: "not last_processed_date"
            action: "prompt_user_for_date_range"
          - condition: "last_processed_date"
            action: "suggest_date_range"
        error_handling:
          retry_on_errors:
            - DatabaseConnectionError
          fallback_action: "use_default_date_range"

      clean_workspace:
        inherits: task_templates.file_operation
        module: "sol_import.workspace"
        function: "clean_workspace"
        parameters:
          source: "./data"
          destination: "{{ archive_directory }}"
          archive_directory: "./data/archive"
          file_types: ["csv", "txt", "xlsx", "log", "old", "docx", "sql", "err", "aud"]
        conditional_logic:
          - condition: "len(files_to_archive) > 0"
            action: "archive_files"
          - condition: "len(files_to_archive) == 0"
            action: "skip_archiving"

      retrieve_new_input_files:
        inherits: task_templates.file_operation
        module: "sol_import.file_operations"
        function: "retrieve_new_input_files"
        parameters:
          source: "T:/EDISHARE/NEW CLAIMS/2024"
          destination: "./data/temp"
        conditional_logic:
          - condition: "len(new_files) > 0"
            action: "copy_files"
          - condition: "len(new_files) == 0"
            action: "notify_no_new_files"
        loops:
          - type: "for_each"
            item: "file"
            in: "new_files"
            do: "copy_file"

      consolidate_input_files:
        inherits: task_templates.data_processing
        module: "sol_import.data_processing"
        function: "consolidate_input_files"
        parameters:
          input_data: 
            directory: "./data/temp"
            pattern: "NCR*.xlsx"
          output_format:
            file: "./data/temp/NCR_combined_output.xlsx"
            type: "excel"
        conditional_logic:
          - condition: "len(input_files) > 0"
            action: "consolidate_files"
          - condition: "len(input_files) == 0"
            action: "raise_error_no_input_files"

      calculate_statute_of_limitations:
        inherits: task_templates.data_processing
        module: "sol_import.sol_calculation"
        function: "calculate_statute_of_limitations"
        parameters:
          input_data:
            file: "./data/temp/NCR_combined_output.xlsx"
          output_format:
            file: "./data/temp/output_data.csv"
            type: "csv"
          state_laws_file: "./data/state_sol_laws.json"
        conditional_logic:
          - condition: "state_laws_loaded"
            action: "calculate_sol_dates"
          - condition: "not state_laws_loaded"
            action: "raise_error_state_laws_not_loaded"
        error_handling:
          on_error: "log_and_retry"
          max_retries: 3
          fallback_action: "use_default_sol_dates"

      generate_input_files:
        inherits: task_templates.data_processing
        module: "sol_import.file_generation"
        function: "generate_input_files"
        parameters:
          input_data:
            file: "./data/temp/output_data.csv"
          output_format:
            utimphis: "./data/output/utimphis.csv"
            imdiary: "./data/output/imdiary.csv"
            lcimp002: "./data/output/lcimp002.csv"
        conditional_logic:
          - condition: "sol_data_loaded"
            action: "generate_files"
          - condition: "not sol_data_loaded"
            action: "raise_error_sol_data_not_loaded"

      process_input_files:
        inherits: base_task
        module: "sol_import.external_processing"
        function: "process_input_files"
        parameters:
          acuthin_path: "\\\\THINCLIENT\\thinclient\\acuthin.exe"
          log_file: "./logs/import_log.txt"
        conditional_logic:
          - condition: "acuthin_accessible"
            action: "run_acuthin"
          - condition: "not acuthin_accessible"
            action: "raise_error_acuthin_not_accessible"
        error_handling:
          on_error: "pause_and_notify"
          critical_errors:
            - AcuthinExecutionError

      copy_to_lcs_data:
        inherits: task_templates.file_operation
        module: "sol_import.file_operations"
        function: "copy_to_lcs_data"
        parameters:
          source: "./data/output"
          destination: "U:"
          network_path: "\\\\thinclient\\cp\\lcs_data"
          files_to_copy: ["utimphis.csv", "imdiary.csv", "lcimp002.csv"]
        conditional_logic:
          - condition: "network_drive_mapped"
            action: "copy_files"
          - condition: "not network_drive_mapped"
            action: "map_network_drive_and_copy_files"
        loops:
          - type: "for_each"
            item: "file"
            in: "files_to_copy"
            do: "copy_file"

      update_processing_history:
        inherits: base_task
        module: "sol_import.database"
        function: "update_processing_history"
        parameters:
          db_path: "./data/processing_history.db"
        conditional_logic:
          - condition: "db_accessible"
            action: "update_history"
          - condition: "not db_accessible"
            action: "raise_error_db_not_accessible"
        error_handling:
          on_error: "log_and_retry"
          max_retries: 5
          fallback_action: "write_to_backup_file"

    workflow:
      - determine_processing_scope
      - clean_workspace
      - retrieve_new_input_files
      - consolidate_input_files
      - calculate_statute_of_limitations
      - generate_input_files
      - process_input_files
      - copy_to_lcs_data
      - update_processing_history